package com.zipcode.weather;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

/**
 * The DAO class for inserting and fetching weather data for a woe id, and also
 * fetching weather history data for a woe id.
 *
 */
public class WeatherDAO {

	private static final Logger logger = Logger.getLogger(WeatherDAO.class);

	private static final String CREATE_ZIPCODE_TABLE_SQL = "CREATE TABLE zipcode ("
			+ "ID NUMBER GENERATED BY DEFAULT AS IDENTITY, " + "ZIP_CODE NUMBER(32) NOT NULL, "
			+ "PRIMARY KEY (ZIP_CODE))";

	private static final String CREATE_ZIPCODE_WEATHER_HISTORY_TABLE_SQL = "CREATE TABLE zipcode_weather ("
			+ "ID NUMBER GENERATED BY DEFAULT AS IDENTITY, " + "ZIP_ID NUMBER(32), " + "DATETIME TIMESTAMP, "
			+ "TEMPERATURE NUMBER(3), " + "FOREIGN KEY(ZIP_ID) REFERENCES ZIPCODE(ZIP_CODE) ON DELETE CASCADE, "
			+ "PRIMARY KEY (ZIP_ID, DATETIME))";

	/**
	 * Creates the necessary tables: zipcode, zipcode_weather.
	 */
	public void createTables() {
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = prepareConnection();
			stmt = conn.createStatement();

			stmt.executeUpdate(CREATE_ZIPCODE_TABLE_SQL);
			stmt.executeUpdate(CREATE_ZIPCODE_WEATHER_HISTORY_TABLE_SQL);

			System.out.println("Table created");
			logger.info("Table created");

		} catch (ClassNotFoundException cnf) {
			logger.error(cnf);
		} catch (SQLException se) {
			logger.error(se);
		} finally {
			try {
				// Close statement and connection
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.error(e);
			}
		}
	}

	/**
	 * Adds the user entered zipcodes to the database.
	 * 
	 * @param zipCodes list of zipcodes to be inserted.
	 */
	public void addZipCodes(List<String> zipCodes) {
		Connection conn = null;
		PreparedStatement ps = null;
		try {

			conn = prepareConnection();
			String query = "INSERT INTO zipcode(zip_code) values(?)";
			ps = conn.prepareStatement(query);
			for (String zipCode : zipCodes) {
				ps.setInt(1, Integer.valueOf(zipCode));
				ps.addBatch();
			}
			ps.executeBatch();

		} catch (ClassNotFoundException e) {
			logger.error(e);
		} catch (SQLException se) {
			logger.error(se);
		} finally {
			try {
				// Close statement and connection
				if (ps != null) {
					ps.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.error(e);
			}
		}
	}

	/**
	 * Saves the current weather data fetched from the web service into the database.
	 * 
	 * @param zipCode zipcode whose weather data is fetched.
	 * 
	 * @param temp weather data: temperature as of today
	 */
	public void saveCurrentWeatherData(String zipCode, double temp) {
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = prepareConnection();

			String query = "INSERT INTO zipcode_weather(zip_id, datetime, temperature) values(?, ?, ?)";
			stmt = conn.prepareStatement(query);

			stmt.setInt(1, Integer.valueOf(zipCode));
			stmt.setDate(2, new java.sql.Date(System.currentTimeMillis()));
			stmt.setDouble(3, temp);
			stmt.execute();

			int inserted = stmt.getUpdateCount();
			logger.info("Output os saving weather data: " + inserted);

		} catch (ClassNotFoundException e) {
			logger.error(e);
		} catch (SQLException se) {
			logger.error(se);
		} finally {
			try {
				// Close statement and connection
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.error(e);
			}
		}
	}

	/**
	 * Retrieves the weather history data for the given woe id.
	 * 
	 * @param zipCode the woe id for which data is to be fetched.
	 * 
	 * @return a Map<Date, String> - collection holding weather data of
	 * a woe id date-wise.
	 */
	public Map<Date, String> getWeatherHistoryData(String zipCode) {
		Map<Date, String> map = new HashMap<Date, String>();
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = prepareConnection();

			String query = "SELECT * FROM zipcode_weather where zip_id = ?";
			stmt = conn.prepareStatement(query);
			stmt.setInt(1, Integer.valueOf(zipCode));

			ResultSet rset = stmt.executeQuery();
			while (rset.next()) {
				map.put(rset.getDate(3), rset.getString(4));
			}
			return map;

		} catch (ClassNotFoundException e) {
			logger.error(e);
		} catch (SQLException se) {
			logger.error(se);
		} finally {
			try {
				// Close statement and connection
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e) {
				logger.error(e);
			}
		}
		return map;
	}

	/**
	 * Fetches the Oracle DB connection.
	 * 
	 * @return a java.sql.Connection object.
	 * 
	 * @throws ClassNotFoundException if unable to load the Oracle Driver
	 * 
	 * @throws SQLException when there is an issue in connecting to the database.
	 */
	public Connection prepareConnection() throws ClassNotFoundException, SQLException {

		String dcn = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@//localhost:1521/orclpdb";
		String username = "ot";
		String pwd = "Orcl1234";

		// step1 load the driver class
		Class.forName(dcn);

		// step2 create the connection object
		return DriverManager.getConnection(url, username, pwd);
	}
}
